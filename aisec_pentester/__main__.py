#!/usr/bin/env python3
"""
Main CLI interface for AISec-Pentester
"""

import click
import sys
from pathlib import Path

# Add the current directory to path for imports
sys.path.insert(0, str(Path(__file__).parent))

from core.framework import AISec
from core.logger import setup_logger


@click.command()
@click.option('--module', type=click.Choice(['adversarial', 'poisoning', 'extraction']), 
              help='Security testing module to run')
@click.option('--target', help='Target model file or API endpoint')
@click.option('--dataset', help='Dataset file for analysis')
@click.option('--config', help='Configuration file path')
@click.option('--output', default='output', help='Output directory for results')
@click.option('--verbose', '-v', is_flag=True, help='Enable verbose logging')
def main(module, target, dataset, config, output, verbose):
    """AISec-Pentester: AI Security Testing Suite"""
    
    # Setup logging
    logger = setup_logger(verbose=verbose)
    
    if not module:
        click.echo("AISec-Pentester: AI Security Testing Suite")
        click.echo("Use --help for available options")
        return
    
    # Initialize framework
    aisec = AISec(config_path=config, output_dir=output)
    
    try:
        if module == 'adversarial':
            if not target:
                click.echo("Error: --target required for adversarial testing")
                return
            result = aisec.run_adversarial_test(target)
            
        elif module == 'poisoning':
            if not dataset:
                click.echo("Error: --dataset required for poisoning detection")
                return
            result = aisec.run_poisoning_scan(dataset)
            
        elif module == 'extraction':
            if not target:
                click.echo("Error: --target required for extraction testing")
                return
            result = aisec.run_extraction_test(target)
        
        logger.info(f"Test completed. Results saved to {output}/")
        
    except Exception as e:
        logger.error(f"Test failed: {str(e)}")
        sys.exit(1)


if __name__ == '__main__':
    main()
