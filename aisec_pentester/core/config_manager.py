"""
Configuration management for AISec-Pentester
"""

import yaml
from pathlib import Path
from typing import Dict, Any, Optional


class ConfigManager:
    """Manages configuration settings"""
    
    DEFAULT_CONFIG = {
        'adversarial': {
            'epsilon': 0.1,
            'num_samples': 100,
            'attack_methods': ['fgsm', 'pgd']
        },
        'poisoning': {
            'detection_threshold': 0.05,
            'statistical_tests': ['isolation_forest', 'one_class_svm']
        },
        'extraction': {
            'query_budget': 1000,
            'confidence_threshold': 0.9
        },
        'output': {
            'format': 'json',
            'include_plots': True
        }
    }
    
    def __init__(self, config_path: Optional[str] = None):
        self.config = self.DEFAULT_CONFIG.copy()
        
        if config_path:
            self.load_config(config_path)
    
    def load_config(self, config_path: str):
        """Load configuration from YAML file"""
        config_file = Path(config_path)
        
        if not config_file.exists():
            raise FileNotFoundError(f"Config file not found: {config_path}")
        
        with open(config_file, 'r') as f:
            user_config = yaml.safe_load(f)
        
        # Merge with default config
        self._merge_config(user_config)
    
    def _merge_config(self, user_config: Dict[str, Any]):
        """Merge user config with default config"""
        for section, settings in user_config.items():
            if section in self.config:
                self.config[section].update(settings)
            else:
                self.config[section] = settings
    
    def get(self, section: str, key: str = None, default=None):
        """Get configuration value"""
        if key is None:
            return self.config.get(section, default)
        return self.config.get(section, {}).get(key, default)
    
    def set(self, section: str, key: str, value: Any):
        """Set configuration value"""
        if section not in self.config:
            self.config[section] = {}
        self.config[section][key] = value
