"""
Core framework class for AISec-Pentester
"""

import logging
import os
from pathlib import Path
from typing import Dict, Any, Optional

from .config_manager import ConfigManager
from .logger import get_logger
from ..modules.adversarial.generator import AdversarialGenerator
from ..modules.poisoning.detector import PoisoningDetector
from ..modules.extraction.scanner import ExtractionScanner


class AISec:
    """Main framework class for AI security testing"""
    
    def __init__(self, config_path: Optional[str] = None, output_dir: str = "output"):
        self.logger = get_logger(__name__)
        self.config = ConfigManager(config_path)
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
        # Initialize modules
        self._init_modules()
        
        self.logger.info("AISec-Pentester framework initialized")
    
    def _init_modules(self):
        """Initialize testing modules"""
        self.adversarial = AdversarialGenerator(self.config)
        self.poisoning = PoisoningDetector(self.config)
        self.extraction = ExtractionScanner(self.config)
    
    def run_adversarial_test(self, target_path: str) -> Dict[str, Any]:
        """Run adversarial robustness testing"""
        self.logger.info(f"Starting adversarial testing on {target_path}")
        
        try:
            # Load target model
            results = self.adversarial.test_model(target_path)
            
            # Save results
            output_file = self.output_dir / "adversarial_results.json"
            self._save_results(results, output_file)
            
            return results
            
        except Exception as e:
            self.logger.error(f"Adversarial testing failed: {str(e)}")
            raise
    
    def run_poisoning_scan(self, dataset_path: str) -> Dict[str, Any]:
        """Run data poisoning detection"""
        self.logger.info(f"Scanning dataset for poisoning: {dataset_path}")
        
        try:
            results = self.poisoning.scan_dataset(dataset_path)
            
            # Save results
            output_file = self.output_dir / "poisoning_results.json"
            self._save_results(results, output_file)
            
            return results
            
        except Exception as e:
            self.logger.error(f"Poisoning scan failed: {str(e)}")
            raise
    
    def run_extraction_test(self, target_url: str) -> Dict[str, Any]:
        """Run model extraction testing"""
        self.logger.info(f"Testing model extraction on {target_url}")
        
        try:
            results = self.extraction.test_extraction(target_url)
            
            # Save results
            output_file = self.output_dir / "extraction_results.json"
            self._save_results(results, output_file)
            
            return results
            
        except Exception as e:
            self.logger.error(f"Extraction test failed: {str(e)}")
            raise
    
    def _save_results(self, results: Dict[str, Any], output_file: Path):
        """Save test results to file"""
        import json
        
        with open(output_file, 'w') as f:
            json.dump(results, f, indent=2, default=str)
        
        self.logger.info(f"Results saved to {output_file}")
