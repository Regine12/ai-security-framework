"""
Professional reporting module for AI security assessments.
Generates HTML and PDF reports with professional formatting.
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Any
import base64

class SecurityReportGenerator:
    """Generate professional security assessment reports in multiple formats."""
    
    def __init__(self):
        self.report_data = {}
        self.findings = []
        self.recommendations = []
        
    def add_finding(self, severity: str, title: str, description: str, 
                   category: str = "", cvss_score: float = 0.0, 
                   affected_components: List[str] = None,
                   recommendations: List[str] = None):
        """Add a security finding to the report."""
        finding = {
            "severity": severity,
            "title": title,
            "description": description,
            "category": category,
            "cvss_score": cvss_score,
            "affected_components": affected_components or [],
            "recommendations": recommendations or [],
            "timestamp": datetime.now().isoformat()
        }
        self.findings.append(finding)
    
    def add_recommendation(self, priority: str, title: str, description: str,
                          effort: str = "Medium", impact: str = "Medium"):
        """Add a security recommendation to the report."""
        recommendation = {
            "priority": priority,
            "title": title,
            "description": description,
            "effort": effort,
            "impact": impact,
            "timestamp": datetime.now().isoformat()
        }
        self.recommendations.append(recommendation)
    
    def generate_html_report(self, output_path: str, assessment_data: Dict[str, Any]) -> str:
        """Generate a professional HTML report."""
        
        # Calculate summary statistics
        findings_by_severity = {}
        for finding in self.findings:
            sev = finding['severity']
            findings_by_severity[sev] = findings_by_severity.get(sev, 0) + 1
        
        total_findings = len(self.findings)
        critical_count = findings_by_severity.get('Critical', 0)
        high_count = findings_by_severity.get('High', 0)
        medium_count = findings_by_severity.get('Medium', 0)
        low_count = findings_by_severity.get('Low', 0)
        
        # Generate HTML content
        html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Security Assessment Report</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            background-color: #f8f9fa;
            color: #333;
        }}
        
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }}
        
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px;
            text-align: center;
        }}
        
        .header h1 {{
            margin: 0;
            font-size: 2.5rem;
            font-weight: 300;
        }}
        
        .header .subtitle {{
            font-size: 1.2rem;
            opacity: 0.9;
            margin-top: 10px;
        }}
        
        .executive-summary {{
            padding: 40px;
            background: #f8f9fa;
            border-left: 5px solid #667eea;
        }}
        
        .summary-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }}
        
        .summary-card {{
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        
        .summary-card .number {{
            font-size: 2.5rem;
            font-weight: bold;
            color: #667eea;
        }}
        
        .summary-card .label {{
            font-size: 0.9rem;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 1px;
        }}
        
        .content-section {{
            padding: 40px;
        }}
        
        .section-title {{
            font-size: 2rem;
            color: #333;
            border-bottom: 2px solid #667eea;
            padding-bottom: 10px;
            margin-bottom: 30px;
        }}
        
        .finding {{
            background: white;
            border-radius: 10px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border-left: 5px solid;
        }}
        
        .finding.critical {{
            border-left-color: #dc3545;
        }}
        
        .finding.high {{
            border-left-color: #fd7e14;
        }}
        
        .finding.medium {{
            border-left-color: #ffc107;
        }}
        
        .finding.low {{
            border-left-color: #28a745;
        }}
        
        .finding-header {{
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }}
        
        .finding-title {{
            font-size: 1.3rem;
            font-weight: 600;
            color: #333;
        }}
        
        .severity-badge {{
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
        }}
        
        .severity-badge.critical {{
            background: #dc3545;
            color: white;
        }}
        
        .severity-badge.high {{
            background: #fd7e14;
            color: white;
        }}
        
        .severity-badge.medium {{
            background: #ffc107;
            color: #212529;
        }}
        
        .severity-badge.low {{
            background: #28a745;
            color: white;
        }}
        
        .finding-description {{
            margin-bottom: 15px;
            line-height: 1.6;
        }}
        
        .finding-details {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }}
        
        .detail-item {{
            background: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
        }}
        
        .detail-label {{
            font-weight: 600;
            color: #667eea;
            font-size: 0.9rem;
        }}
        
        .detail-value {{
            margin-top: 5px;
        }}
        
        .recommendations-list {{
            list-style: none;
            padding: 0;
        }}
        
        .recommendations-list li {{
            background: #e8f4fd;
            padding: 10px 15px;
            margin: 5px 0;
            border-radius: 5px;
            border-left: 3px solid #667eea;
        }}
        
        .footer {{
            background: #333;
            color: white;
            text-align: center;
            padding: 20px;
        }}
        
        .print-only {{
            display: none;
        }}
        
        @media print {{
            .print-only {{
                display: block;
            }}
            
            .no-print {{
                display: none;
            }}
            
            body {{
                background: white;
            }}
            
            .container {{
                box-shadow: none;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>AI Security Assessment Report</h1>
            <div class="subtitle">Comprehensive Security Analysis Report</div>
            <div class="subtitle">Generated on {datetime.now().strftime('%B %d, %Y at %I:%M %p')}</div>
        </div>
        
        <div class="executive-summary">
            <h2>Executive Summary</h2>
            <p>This report presents the findings of a comprehensive AI security assessment conducted using the AISec-Pentester framework. The assessment evaluated multiple security domains including adversarial robustness, data integrity, model security, and deployment protection.</p>
            
            <div class="summary-grid">
                <div class="summary-card">
                    <div class="number">{total_findings}</div>
                    <div class="label">Total Findings</div>
                </div>
                <div class="summary-card">
                    <div class="number">{critical_count}</div>
                    <div class="label">Critical Issues</div>
                </div>
                <div class="summary-card">
                    <div class="number">{high_count}</div>
                    <div class="label">High Risk</div>
                </div>
                <div class="summary-card">
                    <div class="number">{medium_count + low_count}</div>
                    <div class="label">Medium/Low Risk</div>
                </div>
            </div>
        </div>
        
        <div class="content-section">
            <h2 class="section-title">Security Findings</h2>
"""
        
        # Add findings
        if self.findings:
            for finding in sorted(self.findings, key=lambda x: {'Critical': 0, 'High': 1, 'Medium': 2, 'Low': 3}.get(x['severity'], 4)):
                severity_class = finding['severity'].lower()
                html_content += f"""
            <div class="finding {severity_class}">
                <div class="finding-header">
                    <div class="finding-title">{finding['title']}</div>
                    <div class="severity-badge {severity_class}">{finding['severity']}</div>
                </div>
                <div class="finding-description">
                    {finding['description']}
                </div>
                <div class="finding-details">
                    <div class="detail-item">
                        <div class="detail-label">Category</div>
                        <div class="detail-value">{finding['category']}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">CVSS Score</div>
                        <div class="detail-value">{finding['cvss_score']}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Affected Components</div>
                        <div class="detail-value">{', '.join(finding['affected_components']) if finding['affected_components'] else 'N/A'}</div>
                    </div>
                </div>
"""
                if finding['recommendations']:
                    html_content += """
                <div style="margin-top: 20px;">
                    <div class="detail-label">Recommendations:</div>
                    <ul class="recommendations-list">
"""
                    for rec in finding['recommendations']:
                        html_content += f"                        <li>{rec}</li>\n"
                    html_content += "                    </ul>\n                </div>\n"
                
                html_content += "            </div>\n"
        else:
            html_content += """
            <div class="finding low">
                <div class="finding-header">
                    <div class="finding-title">No Critical Security Issues Identified</div>
                    <div class="severity-badge low">Info</div>
                </div>
                <div class="finding-description">
                    The security assessment completed successfully with no critical vulnerabilities detected. This indicates good security posture, but continued monitoring and regular assessments are recommended.
                </div>
            </div>
"""
        
        # Add recommendations section
        html_content += """
        </div>
        
        <div class="content-section">
            <h2 class="section-title">Security Recommendations</h2>
"""
        
        if self.recommendations:
            for rec in sorted(self.recommendations, key=lambda x: {'Critical': 0, 'High': 1, 'Medium': 2, 'Low': 3}.get(x['priority'], 4)):
                priority_class = rec['priority'].lower()
                html_content += f"""
            <div class="finding {priority_class}">
                <div class="finding-header">
                    <div class="finding-title">{rec['title']}</div>
                    <div class="severity-badge {priority_class}">{rec['priority']} Priority</div>
                </div>
                <div class="finding-description">
                    {rec['description']}
                </div>
                <div class="finding-details">
                    <div class="detail-item">
                        <div class="detail-label">Implementation Effort</div>
                        <div class="detail-value">{rec['effort']}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Security Impact</div>
                        <div class="detail-value">{rec['impact']}</div>
                    </div>
                </div>
            </div>
"""
        else:
            html_content += """
            <div class="finding low">
                <div class="finding-title">Standard Security Best Practices</div>
                <div class="finding-description">
                    Continue implementing standard AI security best practices including regular security assessments, monitoring for new vulnerabilities, and keeping frameworks updated.
                </div>
            </div>
"""
        
        # Assessment details
        assessment_summary = assessment_data.get('summary', {})
        html_content += f"""
        </div>
        
        <div class="content-section">
            <h2 class="section-title">Assessment Details</h2>
            <div class="finding low">
                <div class="finding-title">Assessment Configuration</div>
                <div class="finding-details">
                    <div class="detail-item">
                        <div class="detail-label">Framework Version</div>
                        <div class="detail-value">AISec-Pentester v2.0</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Assessment Type</div>
                        <div class="detail-value">Comprehensive Security Assessment</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Modules Tested</div>
                        <div class="detail-value">{assessment_summary.get('modules_tested', 'Adversarial, Extraction, Poisoning')}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Total Runtime</div>
                        <div class="detail-value">{assessment_summary.get('total_runtime', 'N/A')}</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="footer">
            <p>&copy; 2025 AISec-Pentester Framework | Professional AI Security Assessment</p>
            <p>Report generated automatically by AISec-Pentester v2.0</p>
        </div>
    </div>
</body>
</html>
"""
        
        # Write HTML file
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return output_path
    
    def generate_summary_report(self, assessment_data: Dict[str, Any]) -> Dict[str, Any]:
        """Generate a summary report for checklist export."""
        
        # Calculate statistics
        findings_by_severity = {}
        for finding in self.findings:
            sev = finding['severity']
            findings_by_severity[sev] = findings_by_severity.get(sev, 0) + 1
        
        recommendations_by_priority = {}
        for rec in self.recommendations:
            prio = rec['priority']
            recommendations_by_priority[prio] = recommendations_by_priority.get(prio, 0) + 1
        
        summary = {
            "assessment_date": datetime.now().isoformat(),
            "framework_version": "AISec-Pentester v2.0",
            "total_findings": len(self.findings),
            "findings_by_severity": findings_by_severity,
            "total_recommendations": len(self.recommendations),
            "recommendations_by_priority": recommendations_by_priority,
            "overall_risk_score": self._calculate_risk_score(),
            "assessment_status": "Completed",
            "modules_assessed": [
                "Adversarial Attack Testing",
                "Model Extraction Analysis", 
                "Data Poisoning Detection"
            ],
            "security_posture": self._determine_security_posture(findings_by_severity)
        }
        
        return summary
    
    def _calculate_risk_score(self) -> float:
        """Calculate overall risk score based on findings."""
        if not self.findings:
            return 0.0
        
        severity_weights = {
            'Critical': 10.0,
            'High': 7.0,
            'Medium': 4.0,
            'Low': 1.0
        }
        
        total_weight = 0
        for finding in self.findings:
            total_weight += severity_weights.get(finding['severity'], 0)
        
        # Normalize to 0-10 scale
        max_possible = len(self.findings) * 10
        return round((total_weight / max_possible) * 10, 2) if max_possible > 0 else 0.0
    
    def _determine_security_posture(self, findings_by_severity: Dict[str, int]) -> str:
        """Determine overall security posture."""
        critical = findings_by_severity.get('Critical', 0)
        high = findings_by_severity.get('High', 0)
        
        if critical > 0:
            return "Critical - Immediate Action Required"
        elif high > 2:
            return "Poor - Multiple High-Risk Issues"
        elif high > 0:
            return "Moderate - Some Security Concerns"
        else:
            return "Good - No Critical Issues Identified"
