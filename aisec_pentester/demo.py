#!/usr/bin/env python3
"""
Simple demo of AISec-Pentester without external dependencies
"""

import sys
import os
from pathlib import Path

# Add the current directory to path for imports
sys.path.insert(0, str(Path(__file__).parent))

def show_help():
    print("""
AISec-Pentester: AI Security Testing Suite

USAGE:
    python3 demo.py [MODULE] [OPTIONS]

MODULES:
    adversarial    Test adversarial robustness
    poisoning      Detect data poisoning
    extraction     Test model extraction

OPTIONS:
    --target FILE      Target model file
    --dataset FILE     Dataset file
    --help            Show this help

EXAMPLES:
    python3 demo.py adversarial --target model.pkl
    python3 demo.py poisoning --dataset training_data.csv
    python3 demo.py extraction --target https://api.example.com/predict
    """)

def run_adversarial_demo():
    print("[INFO] Starting adversarial testing...")
    print("[PROGRESS] Analyzing model architecture...")
    print("[PROGRESS] Generating adversarial examples...")
    print("[RESULT] Testing robustness: 73% accuracy under attack")
    print("[WARNING] Found 23 exploitable inputs")
    print("[CRITICAL] Model vulnerable to imperceptible perturbations")
    print("[SUCCESS] Adversarial testing complete")

def run_poisoning_demo():
    print("[INFO] Scanning dataset for poisoning...")
    print("[PROGRESS] Statistical analysis in progress...")
    print("[RESULT] Detected 157 anomalous samples")
    print("[FOUND] Backdoor pattern identified in 12 samples")
    print("[MEDIUM] Potential poisoning attack detected")
    print("[SUCCESS] Poisoning scan complete")

def run_extraction_demo():
    print("[INFO] Probing API endpoints...")
    print("[PROGRESS] Analyzing response patterns...")
    print("[ANALYSIS] Inferring model architecture: Deep Neural Network")
    print("[ESTIMATE] Estimated parameters: ~2.3M")
    print("[HIGH RISK] Model extraction possible with 89% fidelity")
    print("[SUCCESS] Extraction test complete")

def main():
    if len(sys.argv) < 2 or '--help' in sys.argv:
        show_help()
        return
    
    module = sys.argv[1]
    
    if module == 'adversarial':
        run_adversarial_demo()
    elif module == 'poisoning':
        run_poisoning_demo()
    elif module == 'extraction':
        run_extraction_demo()
    else:
        print(f"Error: Unknown module '{module}'")
        print("Use --help for available modules")

if __name__ == '__main__':
    main()
