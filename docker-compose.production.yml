# Production Deployment Configuration
# AI Security Framework - Enterprise Grade Setup

version: '3.8'

services:
  # Main AI Security Framework Application
  aisec-framework:
    build: 
      context: .
      dockerfile: Dockerfile.production
    ports:
      - "80:3000"
      - "443:3443"
    environment:
      - NODE_ENV=production
      - PYTHON_ENV=production
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://aisec:${POSTGRES_PASSWORD}@postgres:5432/aisec_db
      - JWT_SECRET=${JWT_SECRET}
      - API_RATE_LIMIT=1000
      - MAX_ASSESSMENT_SIZE=100MB
    volumes:
      - ./output:/home/aisec/output
      - ./logs:/home/aisec/logs
      - ./config:/home/aisec/config
      - assessment_data:/home/aisec/data
      - ssl_certs:/etc/ssl/certs
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aisec-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - aisec-network
    deploy:
      resources:
        limits:
          memory: 512M

  # PostgreSQL for assessment data persistence
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=aisec_db
      - POSTGRES_USER=aisec
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - aisec-network
    deploy:
      resources:
        limits:
          memory: 1G

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - aisec-framework
    restart: unless-stopped
    networks:
      - aisec-network

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - aisec-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - aisec-network
    restart: unless-stopped

networks:
  aisec-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  assessment_data:
  prometheus_data:
  grafana_data:
  ssl_certs:
